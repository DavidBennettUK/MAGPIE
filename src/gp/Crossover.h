#ifndef CROSSOVER_H
#define CROSSOVER_H

#include "Node.h"
#include "TreeFactory.h"

/**
 * Holds the result of a crossover operation.
 * Generated by {@link Crossover}.
 * @see Crossover
 * @author David Bennett
*/
struct CrossoverResult
{
    /** Crossover point on the first tree. Depth-first numbering, starting from 0 (root node). */
    int point1;

    /** Crossover point on the second tree. Depth-first numbering, starting from 0 (root node). */
    int point2;
};

/**
 * Helper class to perform crossover operations between two trees.
 * Performs subtree swapping.
 */
class Crossover
{
public:
    /**
     * Construct the class with a {@link TreeFactory} reference.
     * A {@link TreeFactory} reference is needed to get the current maximum tree depth used
     * for the current scenario, ensuring the crossover operation does not produce trees which
     * exceed this limit.
     * @param treeFactory Reference to a {@link TreeFactory}, usually belonging to the current
     * {@link Scenario}.
     */
    Crossover(const TreeFactory *treeFactory) : treeFactory(treeFactory) { }

    /**
     * Perform a crossover operation between two trees.
     * Two random crossover points are chosen, these nodes are then swapped.
     * Performs the operation directly on the passed trees, so make clones of these before passing
     * if you wish to keep the originals.
     * The resulting trees will not exceed the maximum depth set in the {@link TreeFactory}.
     * If either tree only consists of one node, the trees will not be changed and a crossover result
     * of (0,0) will be returned.
     * @param tree1 The first tree to perform crossover on.
     * @param tree2 The second tree to perform crossover on.
     * @return The result of the operation.
     */
    const CrossoverResult crossover(Node *tree1, Node *tree2);

private:
    /**
     * Reference to a {@link TreeFactory}, usually from the current {@link Scenario}.
     * Needed to obtain current maximum allowed tree depth.
     */
    const TreeFactory *treeFactory;

    /**
     * Helper method to get a random crossover point for the given tree.
     * @param tree The tree to find a random crossover point for.
     * @return A random crossover point. Uses depth-first numbering, starting from 0 (root node)
     */
    int getCrossoverPoint(Node *tree) const;
};

#endif // CROSSOVER_H
